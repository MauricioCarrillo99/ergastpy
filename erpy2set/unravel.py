# -*- coding: utf-8 -*-
"""unravel

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gHhueMyqbJicK1MfoEzAcwT84chAxMCx

# **Paqueterias**
"""

import requests as r
import json 
import pandas as pd
import numpy as np

"""# **UNRAVEL PACK**

"""

########################################
######### Primer dic en Df listas ###### v1.1
########################################

def first_dict(column):

  column=column[contains_dict(column)]
  
  return column.iloc[0]

########################################
######### Existe en ambas listas ####### v1.1
########################################

def it_contains(list1,list2):

  if any((match := item) in list1 for item in list2):
    return True

  else:
    return False

########################################
######### Restructura Dataframe ######## V1.1
########################################

def dataframe_res(Df1,location,Df2):

    Df2_names=Df2.columns.tolist()

    for i in Df2.columns:
      Df1.insert(loc=location, column=i,value=Df2[i])
      location+=1
    
    return Df1

########################################
###### Checa si el objeto es Dict ###### V1.0
########################################

def is_dict(mydic):
  if type(mydic)==dict:
    return True
  else:
    return False

########################################
#### Checa si la columna tiene dict ####  V1.0
########################################

def contains_dict(interest_column):

  boolean_list=[]

  for i in range(len(interest_column)):

    if is_dict(interest_column[i]):
      boolean_list.append(True)
    else:
      boolean_list.append(False)

  return boolean_list

########################################
######### Dict a Columnas ############## V1.0
########################################

def expand(chosen_column, join_id_column,desired_column_name,prefix,f_dict):

    dictionary = []

    len_dict=len(f_dict)
    empty_dict=dict(zip(f_dict.keys(), [np.nan]*len_dict))


    for i,k in zip(chosen_column,join_id_column):

        if pd.isnull(i)==True:
            i=empty_dict
        if i:

            dict1 = {desired_column_name: k }
            new_dict = {**dict1, **i}
            dictionary.append(new_dict)

            Df=pd.DataFrame(dictionary)
            Df_names=Df.columns.tolist()
            Df_names.remove(desired_column_name)

    for i in Df_names:  
      Df.rename(columns={i:prefix+'_'+i}, inplace=True)

    return Df

########################################
######### Dict a Columnas nokey ######## V1.0
########################################

def expand_noKey(chosen_column, prefix,f_dict):

    dictionary = []

    len_dict=len(f_dict)
    empty_dict=dict(zip(f_dict.keys(), [np.nan]*len_dict))


    for i in chosen_column:

        if pd.isnull(i)==True:
            i=empty_dict
        if i:
            new_dict = {**i}
            dictionary.append(new_dict)

            Df=pd.DataFrame(dictionary)
            Df_names=Df.columns.tolist()

    for i in Df_names:  
      Df.rename(columns={i:prefix+'_'+i}, inplace=True)

    return Df

########################################
## Regresa las columnas estructuradas ##  V1.0
########################################

def st_df(Df):

 structure_columns_names=[]
 columns_names= Df.columns.tolist()

 for i in columns_names:

    if True in contains_dict(Df[i]):
      structure_columns_names.append(i)
  
 return structure_columns_names

########################################
######### Todas las columnas ########### v1.1
########################################

def unravel(Df, join_id_column,desired_column_name): 
  
  expand_names=st_df(Df)

  if it_contains(expand_names,Df.columns.tolist())==True:
       for i in expand_names:


         df_aux=expand(Df[i].tolist(), join_id_column.tolist(), desired_column_name,i,first_dict(Df[i]))
         new_cols=df_aux.loc[:, df_aux.columns!=desired_column_name]      

         position_insert=Df.columns.get_loc(i)
         Df=dataframe_res(Df,position_insert,new_cols)
         Df.drop(i, inplace=True, axis=1)

         unravel(Df,join_id_column,desired_column_name)

         return Df
  else:
         return Df


########################################
####### Todas las columnas nokey ####### v1.1
########################################

def unravel_noKey(Df):
  expand_names=st_df(Df)

  if it_contains(expand_names,Df.columns.tolist())==True:
       for i in expand_names:


         df_aux=expand_noKey(Df[i].tolist(),i,first_dict(Df[i]))

         position_insert=Df.columns.get_loc(i)
         Df=dataframe_res(Df,position_insert,df_aux)
         Df.drop(i, inplace=True, axis=1)

         unravel_noKey(Df)

         return Df
  else:
         return Df
